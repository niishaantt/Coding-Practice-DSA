Problem:
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.




class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
Approach1 : using while loops and defining new array and copying back elements in it.
        
        if(m==0 && n == 0){
            return;
        }
        
        int arr[] = new int[m+n];
        int i =0, j=0, k =0;
        while(i<m && j<n){
            if(nums1[i]<= nums2[j]){
                arr[k] = nums1[i];
                i++;
                k++;
            }else{
                arr[k] = nums2[j];
                j++;
                k++;
            }
        }
        
        while(i<m){
            arr[k] = nums1[i];
            k++;
            i++;
        }
   
        
       
        while(j<n){
            arr[k] = nums2[j];
            k++;
            j++;
        }
        
        for(int a =0; a<m+n; a++){
            nums1[a] = arr[a];
        }       
        //nums1 = arr;

        
Approach 2: starting from end instead and making changes in mums1 itself

        int tail1 = m-1, tail2 = n-1, finished = m+n-1;
        while(tail1>=0 && tail2>=0){
            nums1[finished--] = (nums1[tail1]>nums2[tail2] ? nums1[tail1--]:nums2[tail2--]);
        }
        while (tail2 >= 0) { 
        //only need to combine with remaining nums2, if any
        nums1[finished--] = nums2[tail2--];
    }
        
        
       
    }
}